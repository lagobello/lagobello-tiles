###############################################
# convert_tif_to_kml_v4.sh  (v4‑fix)
# Converts a GeoTIFF into a Google‑Earth super‑overlay (doc.kml + tiles)
# with optional tile driver (PNG, WEBP) and zoom range.
#
# Usage examples:
#   TILEDRIVER=PNG   ZOOM="0-18"   ./convert_tif_to_kml_v4.sh src.tif outdir
#   ZOOM=10-18                    ./convert_tif_to_kml_v4.sh src.tif outdir
# If TILEDRIVER is omitted **or set to JPEG**, gdal2tiles' default JPEG tiles are used.
###############################################
#!/usr/bin/env bash
[ -z "$BASH_VERSION" ] && exec /usr/bin/env bash "$0" "$@"
set -euo pipefail

if [[ $# -ne 2 ]]; then
  echo "Usage: $0 <source.tif> <dest_dir>" >&2
  echo "Optional env vars: TILEDRIVER=PNG|WEBP  ZOOM=2-18 (or 'auto')" >&2
  exit 1
fi

SRC_TIF="$1"
DEST_DIR="$2"
mkdir -p "$DEST_DIR"

TILEDRIVER="${TILEDRIVER:-JPEG}"
ZOOM="${ZOOM:-auto}"

# ---------- dependency checks ----------
command -v gdalwarp >/dev/null 2>&1 || { echo 'ERROR: gdalwarp missing.  sudo apt-get install gdal-bin python3-gdal' >&2; exit 1; }
GDAL2TILES=$(command -v gdal2tiles.py || command -v gdal2tiles || true)
[[ -n "$GDAL2TILES" ]] || { echo 'ERROR: gdal2tiles not found (part of gdal-bin). Install it first.' >&2; exit 1; }

# ---------- choose proper KML flag ----------
HELP_TXT=$($GDAL2TILES --help 2>&1 || true)
if   echo "$HELP_TXT" | grep -q -- '--force-kml'; then KML_FLAG='-k'
elif echo "$HELP_TXT" | grep -q -- '--kml';       then KML_FLAG='--kml'
else KML_FLAG=''; fi

[[ -n "$KML_FLAG" ]] && echo "[convert_tif_to_kml] KML flag ⇒ $KML_FLAG" || echo "[convert_tif_to_kml] (KML generated by default)"

echo "[convert_tif_to_kml] Tile driver ⇒ $TILEDRIVER  |  Zoom ⇒ $ZOOM"

TMP_TIF="$(mktemp --suffix=.tif)"; trap 'rm -f "$TMP_TIF"' EXIT

# ---------- 1. Reproject to EPSG:4326 ----------
echo "[convert_tif_to_kml] Reprojecting → EPSG:4326 …"
gdalwarp -multi -wo NUM_THREADS=ALL_CPUS -t_srs EPSG:4326 "$SRC_TIF" "$TMP_TIF"

# ---------- 2. Build tiles ----------
# gdal2tiles breaks when the *output* path contains spaces. Use a temp path and
# move results back if needed.
SAFE_DEST="$DEST_DIR"
if [[ "$DEST_DIR" == *" "* ]]; then
  SAFE_DEST="$(mktemp -d)"
  echo "[convert_tif_to_kml] Output path contains spaces → using temp dir $SAFE_DEST and will move back."
fi

echo "[convert_tif_to_kml] Building tiles …"
CMD=("$GDAL2TILES" -p geodetic)
case "${TILEDRIVER^^}" in
  PNG|WEBP) CMD+=("--tiledriver=$TILEDRIVER") ;;
  *)        echo "[convert_tif_to_kml] Using default JPEG tiles" ;;
esac
[[ $ZOOM != auto ]] && CMD+=( -z "$ZOOM" )
[[ -n "$KML_FLAG" ]] && CMD+=( "$KML_FLAG" )
CMD+=( "$TMP_TIF" "$SAFE_DEST" )

# shellcheck disable=SC2068
${CMD[@]}

# If we used a temp dir, move results back
if [[ "$SAFE_DEST" != "$DEST_DIR" ]]; then
  echo "[convert_tif_to_kml] Moving tiles back to $DEST_DIR …"
  rm -rf "$DEST_DIR"
  mv "$SAFE_DEST" "$DEST_DIR"
fi

echo "[convert_tif_to_kml] ✅  Tiles ready. Root KML → $DEST_DIR/doc.kml"
